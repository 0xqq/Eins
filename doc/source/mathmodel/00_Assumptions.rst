通用规则
========

-----

车辆运行更新方式
^^^^^^^^^^^^^^

在此和之后的元胞自动机模型都采用 **并行更新** ，即在每个时刻刷新状态时，所有车辆同时刷新状态，而非顺序更新，因为并行更新中自发堵塞产生的机理更加真实。

-----

更新车辆的边界条件
^^^^^^^^^^^^^^^^

这里提供两种默认的边界条件:

    1. 周期性边界条件(periodical boundary):  
        在每次更新结束后，监测道路上头车的位置 x\ :sub:`lead`\ ，如果 x\ :sub:`lead`\ > l\ :sub:`road`\ ，那么这辆车将从道路的另一端进入系统，变成道路上的尾车，并且 x\ :sub:`last`\ = x\ :sub:`lead`\ - l\ :sub:`road`\ , v\ :sub:`last`\ = v\ :sub:`lead`\ 。这里，x\ :sub:`lead`\ , x\ :sub:`last`\ , v\ :sub:`lead`\ , v\ :sub:`last`\分别表示道路上头车和尾车的位置和速度，Lroad代表所研究的道路系统的长度。
    
    2. 开口边界性条件(open boundary): 
        假设道路最左边的元胞对应于x = 1,并且道路的入口端包含Vmax个元胞，也就是说，车辆可以从元胞(1,2,... v\ :sub:`max`\ )进入到道路中。在 t->t+1 时刻，当道路上的车辆更新完成后，监测道路上的头车和尾车的位置x\ :sub:`lead`\和x\ :sub:`last`\。如果x\ :sub:`last`\>v\ :sub:`max`\,则一辆速度为v\ :sub:`max`\的车将以概率α进入元胞min(x\ :sub:`last`\-v\ :sub:`max`\, v\ :sub:`max`\)。在道路的出口处，如果x\ :sub:`lead`\ > l\ :sub:`road`\,那么道路上的头车以概率β驶出路段，而紧跟其后的第二辆车成为新的头车。
.. note::
    当然，用户也可以自行定义边界条件

-----